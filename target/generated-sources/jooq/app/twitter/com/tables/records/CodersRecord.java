/*
 * This file is generated by jOOQ.
 */
package app.twitter.com.tables.records;


import app.twitter.com.tables.Coders;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CodersRecord extends TableRecordImpl<CodersRecord> implements Record2<String, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.coders.name</code>.
     */
    public void setName(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.coders.name</code>.
     */
    public String getName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.coders.age</code>.
     */
    public void setAge(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.coders.age</code>.
     */
    public Long getAge() {
        return (Long) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, Long> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Coders.CODERS.NAME;
    }

    @Override
    public Field<Long> field2() {
        return Coders.CODERS.AGE;
    }

    @Override
    public String component1() {
        return getName();
    }

    @Override
    public Long component2() {
        return getAge();
    }

    @Override
    public String value1() {
        return getName();
    }

    @Override
    public Long value2() {
        return getAge();
    }

    @Override
    public CodersRecord value1(String value) {
        setName(value);
        return this;
    }

    @Override
    public CodersRecord value2(Long value) {
        setAge(value);
        return this;
    }

    @Override
    public CodersRecord values(String value1, Long value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CodersRecord
     */
    public CodersRecord() {
        super(Coders.CODERS);
    }

    /**
     * Create a detached, initialised CodersRecord
     */
    public CodersRecord(String name, Long age) {
        super(Coders.CODERS);

        setName(name);
        setAge(age);
    }
}
