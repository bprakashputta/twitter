/*
 * This file is generated by jOOQ.
 */
package app.twitter.com.tables;


import app.twitter.com.Public;
import app.twitter.com.tables.records.CodersRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Coders extends TableImpl<CodersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.coders</code>
     */
    public static final Coders CODERS = new Coders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CodersRecord> getRecordType() {
        return CodersRecord.class;
    }

    /**
     * The column <code>public.coders.name</code>.
     */
    public final TableField<CodersRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.coders.age</code>.
     */
    public final TableField<CodersRecord, Long> AGE = createField(DSL.name("age"), SQLDataType.BIGINT, this, "");

    private Coders(Name alias, Table<CodersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Coders(Name alias, Table<CodersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.coders</code> table reference
     */
    public Coders(String alias) {
        this(DSL.name(alias), CODERS);
    }

    /**
     * Create an aliased <code>public.coders</code> table reference
     */
    public Coders(Name alias) {
        this(alias, CODERS);
    }

    /**
     * Create a <code>public.coders</code> table reference
     */
    public Coders() {
        this(DSL.name("coders"), null);
    }

    public <O extends Record> Coders(Table<O> child, ForeignKey<O, CodersRecord> key) {
        super(child, key, CODERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Coders as(String alias) {
        return new Coders(DSL.name(alias), this);
    }

    @Override
    public Coders as(Name alias) {
        return new Coders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Coders rename(String name) {
        return new Coders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Coders rename(Name name) {
        return new Coders(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
